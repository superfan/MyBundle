buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "com.taobao.android:atlasplugin:2.2.3.rc+"
    }
}

group = 'com.sh3h.android.mybundle'
version = getEnvValue("versionName", "1.0.0");
def apVersion = getEnvValue("apVersion", "");

apply plugin: 'com.taobao.atlas.application'

//TODO do this in plugin
configurations {
    providedCompile
    all*.exclude group: 'com.android.support', module: 'multidex'
}

repositories {
    mavenLocal()
    jcenter()
}

configurations.all {

    resolutionStrategy {
        cacheChangingModulesFor(0, 'SECONDS')
        force "com.google.android:support-v4:21.0.2";
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    defaultConfig {
        applicationId "com.sh3h.mybundle"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName version
        //testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk {
            abiFilters "x86", "armeabi"  //默认只启用x86,armeabi
        }

        resConfigs "en", "fr"
    }

    dexOptions {
        jumboMode = true
        preDexLibraries = true
        // javaMaxHeapSize = '2048m'
    }

    buildTypes {
        debug {
            // debug模式
            multiDexEnabled true
        }

        release {
            multiDexEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

atlas {

    atlasEnabled true

    tBuildConfig {
        autoStartBundles = ['com.sh3h.mylibrary'] //自启动bundle配置
    }


    patchConfigs{
        debug {
            createTPatch true
        }
    }


    buildTypes {
        debug {
            if (apVersion){
                baseApDependency   "com.sh3h.android.mybundle:AP-debug:${apVersion}@ap"
                patchConfig    patchConfigs.debug
            }
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
//    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })

//    compile 'com.android.support.constraint:constraint-layout:1.0.1'
//    testCompile 'junit:junit:4.12'

    compile 'com.android.support:appcompat-v7:23.1.0'

    compile('com.taobao.android:atlas_core:5.0.6@aar') {
        transitive = true
    }

    compile("com.sh3h.android:mylibrary:1.0.2@awb")

    compile 'com.taobao.android:atlasupdate:1.1.4.2@aar'

    compile 'com.alibaba:fastjson:1.1.45.android@jar'
}

//task wrapper(type: Wrapper) {
//    gradleVersion = '2.12'
//    distributionUrl = 'http://services.gradle.org/distributions/gradle-2.12-all.zip'
//}


String getEnvValue(key, defValue) {
    def val = System.getProperty(key);
    if (null != val) {
        return val;
    }
    val = System.getenv(key);
    if (null != val) {
        return val;
    }
    return defValue;
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("DebugAndroidTest")) {
        task.setEnabled(false);
    }
}